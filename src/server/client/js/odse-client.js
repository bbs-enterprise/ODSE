// Generated by CoffeeScript 1.10.0
(function() {
  var ArrayNode, BubbleableOdseEvent, ClientPendingSyncHandler, ClientStorageHandler, ConstructOdseTree, ContainerNode, ErrorEvent, Event, EventEmitter, GenericUtilities, InitialDataDissection, Iterator, ObjectDataStorageEngine, ObjectNode, OdseConfigs, OdseEvent, OdseNode, PrimitiveNode, ServerOdseApiCall, StorageDecider, TransactioNode, TransactioNodeListManager, TransactioNodeManager, TreeMerger, ValueNode, iterate,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.odse = {};

  TransactioNodeListManager = (function() {
    function TransactioNodeListManager() {}

    TransactioNodeListManager.sort = function(transactionNodeList) {
      var sortedTransactionNodeList;
      sortedTransactionNodeList = transactionNodeList.sort(function(left, right) {
        return left.createdTimeStamp - right.createdTimeStamp;
      });
      return sortedTransactionNodeList;
    };

    return TransactioNodeListManager;

  })();

  window.odse.TransactioNodeListManager = TransactioNodeListManager;

  OdseConfigs = (function() {
    function OdseConfigs() {}

    OdseConfigs.dataBlobIdLength = 20;

    OdseConfigs.nodeIdLength = 20;

    OdseConfigs.transactionIdLength = 20;

    OdseConfigs.userIdLength = 128;

    OdseConfigs.serverIdPrefix = 'wFS';

    OdseConfigs.clientIdPrefix = 'ri0';

    OdseConfigs.hostName = 'localhost';

    OdseConfigs.hostPort = '8671';

    OdseConfigs.serverRootUrl = 'http://' + OdseConfigs.hostName + ':' + OdseConfigs.hostPort + '/';

    OdseConfigs.serverApiPathSignature = 'api/1/';

    OdseConfigs.serverApiRootUrl = OdseConfigs.serverRootUrl + OdseConfigs.serverApiPathSignature;

    OdseConfigs.serverAddNodeIdPathApiUrl = OdseConfigs.serverApiRootUrl + 'add-node-id-path';

    OdseConfigs.clientStorageKeyNameForIdPath = 'odse-id-path';

    OdseConfigs.clientStorageKeyNameForTransactions = 'odse-transactions';

    OdseConfigs.newArrayStringConstant = 'new-array';

    OdseConfigs.newObjectStringConstant = 'new-object';

    OdseConfigs.newPrimitiveStringConstant = 'new-primitive';

    OdseConfigs.arrayPushStringConstant = 'array-push';

    OdseConfigs.objectAddStringConstant = 'object-add';

    OdseConfigs.arrayRemoveStringConstant = 'array-remove';

    OdseConfigs.objectRemoveStringConstant = 'object-remove';

    OdseConfigs.primitiveRemoveStringConstant = 'primitive-remove';

    OdseConfigs.primitiveRemoveStringConstant = 'primitive-update';

    return OdseConfigs;

  })();

  window.odse.OdseConfigs = OdseConfigs;

  GenericUtilities = (function() {
    function GenericUtilities() {}

    GenericUtilities.objectString = 'object';

    GenericUtilities.undefinedString = 'undefined';

    GenericUtilities.isNotNull = function(obj, propertyName) {
      if (propertyName === null || (typeof propertyName) === window.odse.GenericUtilities.undefinedString) {
        if (obj === null || (typeof obj) === window.odse.GenericUtilities.undefinedString) {
          return false;
        }
        return true;
      }
      if (obj[propertyName] === null || (typeof obj[propertyName]) === window.odse.GenericUtilities.undefinedString) {
        return false;
      }
      return true;
    };

    GenericUtilities.cloneObj = function(obj) {
      var flags, key, newInstance, res;
      if ((obj == null) || typeof obj !== 'object') {
        return obj;
      }
      if (obj instanceof Date) {
        res = new Date(obj.getTime());
        return res;
      }
      if (obj instanceof RegExp) {
        flags = '';
        if (obj.global != null) {
          flags += 'g';
        }
        if (obj.ignoreCase != null) {
          flags += 'i';
        }
        if (obj.multiline != null) {
          flags += 'm';
        }
        if (obj.sticky != null) {
          flags += 'y';
        }
        return new RegExp(obj.source, flags);
      }
      newInstance = new obj.constructor();
      for (key in obj) {
        newInstance[key] = this.cloneObj(obj[key]);
      }
      return newInstance;
    };

    GenericUtilities.htmlEscape = function(stringData) {
      return String(stringData).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    };

    GenericUtilities.htmlUnescape = function(stringData) {
      return String(stringData).replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    };

    GenericUtilities.onlyContainsDigits = function(stringData) {
      var i, j, len, ref, res;
      len = stringData.length;
      res = true;
      for (i = j = 0, ref = len - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        if (!(stringData.charCodeAt(i) >= '0'.charCodeAt(0) && stringData.charCodeAt(i) <= '9'.charCodeAt(0))) {
          return false;
        }
      }
      return true;
    };

    GenericUtilities.generateRandomAlphaNumericString = function(len) {
      var i, idx, j, k, l, m, ref, res, size, values;
      res = '';
      values = [];
      for (i = j = 0; j < 26; i = ++j) {
        values.push(String.fromCharCode(('a'.charCodeAt(0)) + i));
      }
      for (i = k = 0; k < 26; i = ++k) {
        values.push(String.fromCharCode(('A'.charCodeAt(0)) + i));
      }
      for (i = l = 0; l < 10; i = ++l) {
        values.push(String.fromCharCode(('0'.charCodeAt(0)) + i));
      }
      size = values.length;
      for (i = m = 0, ref = len; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
        idx = Math.floor(Math.random() * 1e9) % size;
        res += values[idx];
      }
      return res;
    };

    GenericUtilities.generateRandomAlphaNumericStringWithPrefix = function(prefix, len) {
      var res;
      res = prefix;
      res += window.odse.GenericUtilities.generateRandomAlphaNumericString(len);
      return res;
    };

    GenericUtilities.isRunningOnServer = function() {
      var error, ex;
      try {
        if (window !== null && (typeof window) !== 'undefined') {
          return false;
        }
      } catch (error) {
        ex = error;
        return true;
      }
      return true;
    };

    GenericUtilities.generateNodeId = function() {
      var nodeId;
      nodeId = null;
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        nodeId = window.odse.GenericUtilities.generateRandomAlphaNumericStringWithPrefix(window.odse.OdseConfigs.serverIdPrefix, window.odse.OdseConfigs.nodeIdLength - window.odse.OdseConfigs.serverIdPrefix.length);
      } else {
        nodeId = window.odse.GenericUtilities.generateRandomAlphaNumericStringWithPrefix(window.odse.OdseConfigs.clientIdPrefix, window.odse.OdseConfigs.nodeIdLength - window.odse.OdseConfigs.clientIdPrefix.length);
      }
      return nodeId;
    };

    GenericUtilities.generateDataBlobId = function() {
      var blobId;
      blobId = null;
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        blobId = window.odse.GenericUtilities.generateRandomAlphaNumericStringWithPrefix(window.odse.OdseConfigs.serverIdPrefix, window.odse.OdseConfigs.dataBlobIdLength - window.odse.OdseConfigs.serverIdPrefix.length);
      } else {
        blobId = window.odse.GenericUtilities.generateRandomAlphaNumericStringWithPrefix(window.odse.OdseConfigs.clientIdPrefix, window.odse.OdseConfigs.dataBlobIdLength - window.odse.OdseConfigs.clientIdPrefix.length);
      }
      return blobId;
    };

    return GenericUtilities;

  })();

  window.odse.GenericUtilities = GenericUtilities;

  TransactioNode = (function() {
    TransactioNode.prototype.transactionId = null;

    TransactioNode.prototype.createdTimeStamp = null;

    TransactioNode.prototype.userId = null;

    TransactioNode.prototype.blobId = null;

    TransactioNode.prototype.nodeId = null;

    TransactioNode.prototype.type = null;

    TransactioNode.prototype.val = null;

    TransactioNode.prototype.propertyName = null;

    function TransactioNode(userIdParam, blobIdParam, nodeIdParam, typeParam, valParam, propertyNameParam) {
      this.transactionId = window.odse.GenericUtilities.generateRandomAlphaNumericStringWithPrefix(window.odse.OdseConfigs.clientIdPrefix, window.odse.OdseConfigs.transactionIdLength - window.odse.OdseConfigs.clientIdPrefix.length);
      this.createdTimeStamp = Date.now();
      this.userId = userIdParam;
      this.blobId = blobIdParam;
      this.nodeId = nodeIdParam;
      this.type = typeParam;
      if ((window.odse.GenericUtilities.isNotNull(valParam)) === true) {
        this.val = valParam;
      }
      if ((window.odse.GenericUtilities.isNotNull(propertyNameParam)) === true) {
        this.propertyName = propertyNameParam;
      }
    }

    return TransactioNode;

  })();

  window.odse.TransactioNode = TransactioNode;

  ServerOdseApiCall = (function() {
    function ServerOdseApiCall() {}

    ServerOdseApiCall.genericServerApiCall = function(partialUrl, data, cbfn) {
      var options, requestObj, result;
      if ((typeof data) === 'object') {
        data = JSON.stringify(data);
      }
      options = {};
      options.host = window.odse.OdseConfigs.hostName;
      options.port = window.odse.OdseConfigs.hostPort;
      options.path = '/' + window.odse.OdseConfigs.serverApiPathSignature + partialUrl;
      options.method = 'POST';
      options.headers = {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(data)
      };
      result = '';
      requestObj = http.request(options, (function(_this) {
        return function(responseObj) {
          responseObj.on('data', function(chunk) {
            return result += chunk;
          });
          return responseObj.on('end', function() {
            return cbfn(JSON.parse(result));
          });
        };
      })(this));
      requestObj.write(data);
      return requestObj.end();
    };

    ServerOdseApiCall.clearAllOdseDataApi = function(cbfn) {
      return window.odse.ServerOdseApiCall.genericServerApiCall('clear-all-odse-data', {}, (function(_this) {
        return function(response) {
          if ((window.odse.GenericUtilities.isNotNull(cbfn)) === true) {
            return cbfn(response.data);
          }
        };
      })(this));
    };

    ServerOdseApiCall.callSaveNewTransactionHistoryApi = function(transactionList, cbfn) {
      return window.odse.ServerOdseApiCall.genericServerApiCall('save-new-transaction-history', transactionList, (function(_this) {
        return function(response) {
          if ((window.odse.GenericUtilities.isNotNull(cbfn)) === true) {
            return cbfn(response.data);
          }
        };
      })(this));
    };

    ServerOdseApiCall.callGetTransactionHistoryApi = function(blobId, cbfn) {
      return window.odse.ServerOdseApiCall.genericServerApiCall('get-transaction-history', {
        blobId: blobId
      }, (function(_this) {
        return function(response) {
          if ((window.odse.GenericUtilities.isNotNull(cbfn)) === true) {
            response.data = window.odse.TransactioNodeListManager.sort(response.data);
            return cbfn(blobId, response.data);
          }
        };
      })(this));
    };

    ServerOdseApiCall.callSaveNewNodeIdPathListApi = function(nodeIdPathList, cbfn) {
      return window.odse.ServerOdseApiCall.genericServerApiCall('save-new-node-id-path-list', nodeIdPathList, (function(_this) {
        return function(response) {
          if ((window.odse.GenericUtilities.isNotNull(cbfn)) === true) {
            return cbfn(response.data);
          }
        };
      })(this));
    };

    ServerOdseApiCall.callGetNodeIdPathListApi = function(blobId, cbfn) {
      return window.odse.ServerOdseApiCall.genericServerApiCall('get-node-id-path-list', {
        blobId: blobId
      }, (function(_this) {
        return function(response) {
          if ((window.odse.GenericUtilities.isNotNull(cbfn)) === true) {
            return cbfn(blobId, response.data);
          }
        };
      })(this));
    };

    return ServerOdseApiCall;

  })();

  window.odse.ServerOdseApiCall = ServerOdseApiCall;

  StorageDecider = (function() {
    function StorageDecider() {}

    StorageDecider.clearServerStorage = function(cbfn) {
      return window.odse.ServerOdseApiCall.clearAllOdseDataApi(cbfn);
    };

    StorageDecider.clearClientStorage = function(cbfn) {};

    StorageDecider.saveNewTransactionHistory = function(transactionList, cbfn) {
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        return window.odse.ServerOdseApiCall.callSaveNewTransactionHistoryApi(transactionList, cbfn);
      }
    };

    StorageDecider.saveNewNodeIdPathList = function(nodeIdPathList, cbfn) {
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        return window.odse.ServerOdseApiCall.callSaveNewNodeIdPathListApi(nodeIdPathList, cbfn);
      }
    };

    StorageDecider.saveBothTransactionHistoryAndNewNodeIdPathList = function(transactionList, nodeIdPathList, cbfn) {
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        return window.odse.ServerOdseApiCall.callSaveNewTransactionHistoryApi(transactionList, (function(_this) {
          return function(saveNewTransactionHistoryResponse) {
            return window.odse.ServerOdseApiCall.callSaveNewNodeIdPathListApi(nodeIdPathList, function(saveNewNodeIdPathListResponse) {
              return cbfn(saveNewTransactionHistoryResponse, saveNewNodeIdPathListResponse);
            });
          };
        })(this));
      }
    };

    StorageDecider.getNodeIdPathList = function(blobId, cbfn) {
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        return window.odse.ServerOdseApiCall.callGetNodeIdPathListApi(blobId, cbfn);
      }
    };

    StorageDecider.getTransactionHistory = function(blobId, cbfn) {
      if (window.odse.GenericUtilities.isRunningOnServer() === true) {
        return window.odse.ServerOdseApiCall.callGetTransactionHistoryApi(blobId, cbfn);
      }
    };

    return StorageDecider;

  })();

  window.odse.StorageDecider = StorageDecider;

  Iterator = (function() {
    function Iterator(list1, forEachFn1) {
      this.list = list1;
      this.forEachFn = forEachFn1;
      this.then = bind(this.then, this);
      this.next = bind(this.next, this);
      this.index = 0;
      this.hasIterationEnded = false;
      this.next();
    }

    Iterator.prototype.next = function() {
      var cb, oldIndex;
      if (this.index === this.list.length) {
        this.hasIterationEnded = true;
        if (this.finalFn && this.hasIterationEnded) {
          cb = this.finalFn;
          this.finalFn = null;
          return cb();
        }
      } else {
        oldIndex = this.index;
        this.index++;
        return this.forEachFn(this.next, oldIndex, this.list[oldIndex]);
      }
    };

    Iterator.prototype.then = function(finalFn) {
      var cb;
      this.finalFn = finalFn;
      if (this.finalFn && this.hasIterationEnded) {
        cb = this.finalFn;
        this.finalFn = null;
        return cb();
      }
    };

    return Iterator;

  })();

  window.odse.Iterator = Iterator;

  iterate = function(list, forEachFn) {
    return new window.odse.Iterator(list, forEachFn);
  };

  window.odse.iterate = iterate;

  EventEmitter = (function() {
    function EventEmitter() {
      this._EventClassMap = {};
      this.register(window.odse.ErrorEvent, 'error');
    }

    EventEmitter.prototype.__getProperEventName = function(eventArg) {
      if (typeof eventArg === 'object' && eventArg.prototype instanceof window.odse.Event) {
        return eventArg.prototype.name;
      } else if (typeof eventArg === 'string') {
        return eventArg;
      } else {
        throw new Error('Type Mismatch. Expected <Event> or <string>');
      }
    };

    EventEmitter.prototype.isRegistered = function(name) {
      return name in this._EventClassMap;
    };

    EventEmitter.prototype.register = function(EventClass, name) {
      if (name == null) {
        name = null;
      }
      if (!name) {
        name = EventClass.prototype.name;
      }
      if (this.isRegistered(name)) {
        throw new Error("Event <" + name + "> is already registered");
      }
      this._EventClassMap[name] = {
        earlyHandlerList: [],
        lateHandlerList: [],
        handlerList: [],
        EventClass: EventClass
      };
      return this;
    };

    EventEmitter.prototype.addEventHandler = function() {
      var args, eventArg, executionContext, handlerFn, modifier, name;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args.length === 2) {
        eventArg = args[0], handlerFn = args[1];
        modifier = null;
      } else if (args.length === 3) {
        eventArg = args[0], modifier = args[1], handlerFn = args[2];
      } else if (args.length === 4) {
        eventArg = args[0], modifier = args[1], executionContext = args[2], handlerFn = args[3];
      }
      if (executionContext) {
        handlerFn = handlerFn.bind(executionContext);
      } else {
        handlerFn = handlerFn.bind(this);
      }
      if (typeof handlerFn !== 'function') {
        throw new Error('Type Mismatch. Expected <function>');
      }
      name = this.__getProperEventName(eventArg);
      if (!this.isRegistered(name)) {
        throw new Error("Event <" + name + "> is not registered and so can not be listened to.");
      }
      if (modifier === null) {
        this._EventClassMap[name].handlerList.push(handlerFn);
      } else if (modifier === 'late') {
        this._EventClassMap[name].lateHandlerList.push(handlerFn);
      } else if (modifier === 'early') {
        this._EventClassMap[name].earlyHandlerList.push(handlerFn);
      } else {
        throw new Error('Unknown Modifier');
      }
      return this;
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addEventHandler;

    EventEmitter.prototype.removeEventHandler = function(eventArg, handlerFn) {
      var name, pos;
      if (handlerFn == null) {
        handlerFn = null;
      }
      name = this.__getProperEventName(eventArg);
      if (!this.isRegistered(name)) {
        throw new Error("Event <" + name + "> is not registered and so nothing to remove listener from");
      }
      if (handlerFn === null) {
        return this._EventClassMap[name].handlerList = {};
      } else {
        if (typeof handlerFn !== 'function') {
          throw new Error('Type Mismatch. Expected <function>');
        }
        if ((pos = this._EventClassMap[name].handlerList.indexOf(handlerFn)) > -1) {
          return this._EventClassMap[name].handlerList.splice(pos, 1);
        } else {
          throw new Error('handler does not exist and so can not be removed');
        }
      }
    };

    EventEmitter.prototype.off = EventEmitter.prototype.removeEventHandler;

    EventEmitter.prototype.once = function(eventArg, handlerFn) {
      var called, fn;
      called = false;
      fn = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (called) {
            args[0].next();
          } else {
            handlerFn.apply(_this, args);
          }
          return called = true;
        };
      })(this);
      return this.on(eventArg, fn);
    };

    EventEmitter.prototype.getEventHandlerList = function(eventArg) {
      var name;
      name = this.__getProperEventName(eventArg);
      if (!this.isRegistered(name)) {
        throw new Error("Event <" + name + "> is not registered and so can not be emitted.");
      }
      return [].concat(this._EventClassMap[name].earlyHandlerList, this._EventClassMap[name].handlerList, this._EventClassMap[name].lateHandlerList);
    };

    EventEmitter.prototype.emit = function(eventArg, data, completionHandler) {
      var eventObject, name;
      if (data == null) {
        data = null;
      }
      if (completionHandler == null) {
        completionHandler = null;
      }
      name = this.__getProperEventName(eventArg);
      if (!this.isRegistered(name)) {
        throw new Error("Event <" + name + "> is not registered and so can not be emitted.");
      }
      eventObject = new this._EventClassMap[name].EventClass({
        origin: this,
        target: this,
        data: data,
        name: name
      });
      if (completionHandler) {
        eventObject.setCompletionCallback(completionHandler);
      }
      eventObject.dispatch();
      return this;
    };

    return EventEmitter;

  })();

  window.odse.EventEmitter = EventEmitter;

  Event = (function(superClass) {
    extend(Event, superClass);

    Event.isSequencial = true;

    Event.isAsync = true;

    Event.fallbackHandler = null;

    Event.prototype.name = 'Event';

    function Event(arg) {
      var data, error, ex, handlerList, name, ref;
      ref = arg != null ? arg : {}, this.origin = ref.origin, this.target = ref.target, data = ref.data, handlerList = ref.handlerList, name = ref.name;
      this.reset = bind(this.reset, this);
      this.next = bind(this.next, this);
      this.dispatch = bind(this.dispatch, this);
      this.stopPropagation = bind(this.stopPropagation, this);
      Event.__super__.constructor.apply(this, arguments);
      if (!((this.origin === null) || (typeof this.origin === 'object' && this.origin instanceof window.odse.EventEmitter))) {
        throw new Error('Type Mismatch. Expected origin to be <null> or <EventEmitter>');
      }
      if (!((this.target === null) || (typeof this.target === 'object' && this.target instanceof window.odse.EventEmitter))) {
        throw new Error('Type Mismatch. Expected target to be <null> or <EventEmitter>');
      }
      if (this.origin && !this.target) {
        this.target = this.origin;
      }
      if (this.target && !this.origin) {
        this.origin = this.target;
      }
      this.storedData = data;
      this.storedData || (this.storedData = {});
      if (typeof name === 'string') {
        this.name = name;
      } else {
        try {
          if (this.name === 'Event' && this.constructor.name !== 'Event') {
            this.name = this.constructor.name;
          }
        } catch (error) {
          ex = error;
        }
      }
      if (typeof handlerList === 'object' && Array.isArray(handlerList)) {
        this._handlerList = handlerList;
      } else {
        if (!this.target) {
          throw new Error('Insufficient Information to trigger event');
        }
        this._handlerList = this.target.getEventHandlerList(this.name);
      }
      if (this._handlerList.length === 0 && this.constructor.fallbackHandler !== null) {
        this._handlerList = [this.constructor.fallbackHandler];
      }
      if (!(typeof this._handlerList === 'object' && Array.isArray(this._handlerList))) {
        throw new Error('Type Mismatch. Expected <array>');
      }
      if (typeof this.storedData !== 'object') {
        throw new Error('Type Mismatch. Expected <object>');
      }
      this._handlerIndex = 0;
      this._completionCallback = null;
      this.hasPropagationStopped = false;
      this.isDispatched = false;
      this.path = [this.target];
    }

    Event.prototype.setCompletionCallback = function(fn) {
      if (typeof fn !== 'function') {
        throw new Error('Type Mismatch. Expected <function>');
      }
      this._completionCallback = fn;
      return this;
    };

    Event.prototype._invokeCompletionCallback = function() {
      var cbfn;
      if (!this._completionCallback) {
        return false;
      }
      cbfn = this._completionCallback;
      this._completionCallback = null;
      return cbfn(this);
    };

    Event.prototype.stopPropagation = function() {
      this.hasPropagationStopped = true;
      return this;
    };

    Event.prototype.dispatch = function() {
      var handlerFn, j, len1, ref;
      if (this.isDispatched) {
        throw new Error('Event is already dispatched');
      }
      this.isDispatched = true;
      if (this.constructor.isSequencial && this.constructor.isAsync) {
        return this.next();
      } else {
        ref = this._handlerList;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          handlerFn = ref[j];
          handlerFn(this);
        }
        return this._invokeCompletionCallback();
      }
    };

    Event.prototype.next = function() {
      var handlerFn;
      if (!this.constructor.isAsync) {
        throw new Error('next() is available only during Async Events');
      }
      if (!this.isDispatched) {
        throw new Error('next() can only be called after the event is dispatched');
      }
      if (!this.constructor.isSequencial) {
        return false;
      }
      if (this._handlerList.length === this._handlerIndex || this.hasPropagationStopped) {
        this._invokeCompletionCallback();
        return;
      }
      handlerFn = this._handlerList[this._handlerIndex++];
      handlerFn(this);
    };

    Event.prototype.reset = function() {
      this._handlerIndex = 0;
      return this;
    };

    Event.prototype.delegate = function(arg, postDelegationHandler) {
      var handlerList, name, ref, replacementCompletionHandler, target;
      ref = arg != null ? arg : {}, target = ref.target, name = ref.name, handlerList = ref.handlerList;
      if (postDelegationHandler == null) {
        postDelegationHandler = null;
      }
      if (!(typeof handlerList === 'object' && Array.isAarry(handlerList))) {
        if (!target) {
          throw new Error('Insufficient Information to delegate event');
        }
        if (!name) {
          name = this.name;
        }
        handlerList = target.getEventHandlerList(name);
      }
      if (!target) {
        target = this.target;
      }
      this.path.push(target);
      replacementCompletionHandler = (function(_this) {
        return function() {
          if (postDelegationHandler) {
            return postDelegationHandler(_this);
          }
        };
      })(this);
      this.target = target;
      this.isDispatched = false;
      this._handlerList = handlerList;
      this._handlerIndex = 0;
      this._completionCallback = replacementCompletionHandler;
      return this.dispatch();
    };

    return Event;

  })(window.odse.EventEmitter);

  window.odse.Event = Event;

  ErrorEvent = (function(superClass) {
    extend(ErrorEvent, superClass);

    ErrorEvent.isAsync = true;

    ErrorEvent.isSequencial = false;

    ErrorEvent.fallbackHandler = function(e) {
      console.log('Unmonitored Error');
      console.log("  Code: " + e.code);
      console.log("  Details: " + e.details);
      console.log("  Is Resolved: " + e.isResolved);
      return console.log("  Resolution: " + e.resolution);
    };

    function ErrorEvent(options) {
      ErrorEvent.__super__.constructor.call(this, options);
      this.code = options.data.code;
      this.details = options.data.details;
      this.isResolved = options.data.isResolved;
      this.isResolved || (this.isResolved = false);
      this.resolution = options.data.resolution;
      this.resolution || (this.resolution = null);
    }

    return ErrorEvent;

  })(window.odse.Event);

  window.odse.ErrorEvent = ErrorEvent;

  OdseEvent = (function(superClass) {
    extend(OdseEvent, superClass);

    OdseEvent.isSequencial = true;

    OdseEvent.isAsync = true;

    function OdseEvent() {
      OdseEvent.__super__.constructor.apply(this, arguments);
      this.detail = this.storedData;
    }

    return OdseEvent;

  })(window.odse.Event);

  BubbleableOdseEvent = (function(superClass) {
    extend(BubbleableOdseEvent, superClass);

    function BubbleableOdseEvent() {
      this._nodeCompletionHandler = bind(this._nodeCompletionHandler, this);
      this.bubbleUp = bind(this.bubbleUp, this);
      BubbleableOdseEvent.__super__.constructor.apply(this, arguments);
      this.isBubblingStopped = false;
      this.setCompletionCallback(this._nodeCompletionHandler);
    }

    BubbleableOdseEvent.prototype.stopBubbling = function() {
      this.isBubblingStopped = true;
      return this;
    };

    BubbleableOdseEvent.prototype.bubbleUp = function() {
      var parent;
      if (this.isBubblingStopped) {
        return false;
      }
      if (!(this.target.parentList && typeof this.target.parentList === 'object' && Array.isArray(this.target.parentList))) {
        return false;
      }
      if (this.target.parentList.length === 0) {
        return false;
      }
      if (this.target.parentList.length > 1) {
        throw new window.odse.VendorError("Still unable to handle multiple parents");
      }
      parent = this.target.parentList[0];
      this.delegate({
        target: parent
      }, this._nodeCompletionHandler);
      return this;
    };

    BubbleableOdseEvent.prototype._nodeCompletionHandler = function(e) {
      return this.bubbleUp();
    };

    return BubbleableOdseEvent;

  })(window.odse.OdseEvent);

  OdseNode = (function(superClass) {
    extend(OdseNode, superClass);

    OdseNode.seed = 0;

    OdseNode.prototype.nodeId = null;

    OdseNode.prototype.createdTimeStamp = null;

    OdseNode.prototype.lastUpdateTimeStamp = null;

    function OdseNode() {
      OdseNode.__super__.constructor.apply(this, arguments);
      this.register(window.odse.BubbleableOdseEvent, 'create');
      this.register(window.odse.BubbleableOdseEvent, 'attach');
      this.register(window.odse.BubbleableOdseEvent, 'detach');
      this.register(window.odse.BubbleableOdseEvent, 'remove');
      this.serial = window.odse.OdseNode.seed++;
      this.parentList = [];
      setImmediate((function(_this) {
        return function() {
          return _this.emit('create', {
            node: _this
          });
        };
      })(this));
      this.nodeId = window.odse.GenericUtilities.generateNodeId();
      this.createdTimeStamp = Date.now();
      this.lastUpdateTimeStamp = this.createdTimeStamp;
    }

    OdseNode.prototype._attachTo = function(parentNode) {
      if (!(parentNode instanceof window.odse.ContainerNode)) {
        throw new Error("Expected <ContainerNode>");
      }
      this.parentList.push(parentNode);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('attach', {
            node: _this,
            to: parentNode
          });
        };
      })(this));
    };

    OdseNode.prototype._detachFrom = function(parentNode) {
      var index;
      if (!(parentNode instanceof window.odse.ContainerNode)) {
        throw new Error("Expected <ContainerNode>");
      }
      if (!((index = this.parentList.indexOf(parentNode)) > -1)) {
        throw new Error("Node is not attached.");
      }
      this.parentList.splice(index, 1);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('detach', {
            node: _this,
            from: parentNode
          });
        };
      })(this));
    };

    OdseNode.prototype.remove = function() {
      var j, len1, parentNode, ref;
      ref = this.parentList;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        parentNode = ref[j];
        parentNode.forceRemoveChild(this);
      }
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('remove', {
            node: _this
          });
        };
      })(this));
    };

    return OdseNode;

  })(window.odse.EventEmitter);

  ValueNode = (function(superClass) {
    extend(ValueNode, superClass);

    function ValueNode() {
      ValueNode.__super__.constructor.apply(this, arguments);
      this.register(window.odse.BubbleableOdseEvent, 'set');
      this.__value = null;
    }

    ValueNode.prototype.__setValue = function(newValue) {
      return this.__value = newValue;
    };

    ValueNode.prototype.setValue = function(newValue) {
      var oldValue;
      oldValue = this.__value;
      this.__setValue(newValue);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('set', {
            node: _this,
            oldValue: oldValue,
            newValue: newValue
          });
        };
      })(this));
    };

    return ValueNode;

  })(window.odse.OdseNode);

  PrimitiveNode = (function(superClass) {
    extend(PrimitiveNode, superClass);

    function PrimitiveNode(value) {
      if (value == null) {
        value = null;
      }
      PrimitiveNode.__super__.constructor.apply(this, arguments);
      this.__setValue(value);
    }

    PrimitiveNode.prototype.getValue = function() {
      return this.__value;
    };

    return PrimitiveNode;

  })(window.odse.ValueNode);

  ContainerNode = (function(superClass) {
    extend(ContainerNode, superClass);

    function ContainerNode() {
      ContainerNode.__super__.constructor.apply(this, arguments);
      this.register(window.odse.BubbleableOdseEvent, 'update');
    }

    return ContainerNode;

  })(window.odse.ValueNode);

  ObjectNode = (function(superClass) {
    extend(ObjectNode, superClass);

    function ObjectNode(map) {
      if (map == null) {
        map = null;
      }
      ObjectNode.__super__.constructor.apply(this, arguments);
      this.childrenMap = {};
      this.__setValue(map);
    }

    ObjectNode.prototype.__setValue = function(newValue) {
      var key, results, value;
      ObjectNode.__super__.__setValue.apply(this, arguments);
      if (!(newValue === null || (typeof newValue === 'object' && !Array.isArray(newValue)))) {
        throw new window.odse.ExtendedError("E_EXP_OBJECT", "Expected <object>", newValue);
      }
      this.__resetMap();
      if (!newValue) {
        return;
      }
      results = [];
      for (key in newValue) {
        value = newValue[key];
        this.childrenMap[key] = window.odse.ObjectDataStorageEngine.parse(value);
        results.push(this.childrenMap[key]._attachTo(this));
      }
      return results;
    };

    ObjectNode.prototype.__resetMap = function() {
      var key, node, ref;
      ref = this.childrenMap;
      for (key in ref) {
        node = ref[key];
        node._detachFrom(this);
      }
      return this.childrenMap = {};
    };

    ObjectNode.prototype.addNode = function(key, node) {
      var detail, oldNode;
      if (!(key && node)) {
        throw new Error("Missing key/node");
      }
      detail = {
        node: this,
        childNode: node,
        operation: 'child-add',
        key: key
      };
      if (key in this.childrenMap) {
        oldNode = this.childrenMap[key];
        oldNode._detachFrom(this);
        detail.operation = 'child-replace';
        detail.replacedChildNode = oldNode;
      }
      this.childrenMap[key] = node;
      node._attachTo(this);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('update', detail);
        };
      })(this));
    };

    ObjectNode.prototype.removeNode = function(key) {
      var detail, node;
      if (!(key in this.childrenMap)) {
        throw new Error("Unknown Key");
      }
      node = this.childrenMap[key];
      detail = {
        node: this,
        childNode: node,
        operation: 'child-remove',
        key: key
      };
      node._detachFrom(this);
      delete this.childrenMap[key];
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('update', detail);
        };
      })(this));
    };

    ObjectNode.prototype.remove = function() {
      var key, node, ref;
      ref = this.childrenMap;
      for (key in ref) {
        node = ref[key];
        node._detachFrom(this);
      }
      this.childrenMap = {};
      return ObjectNode.__super__.remove.apply(this, arguments);
    };

    ObjectNode.prototype.forceRemoveChild = function(nodeToRemove) {
      var key, node, ref, results;
      ref = this.childrenMap;
      results = [];
      for (key in ref) {
        node = ref[key];
        if (node === nodeToRemove) {
          results.push(this.removeNode(key));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ObjectNode.prototype.forEach = function(fn) {
      var key, node, ref, results;
      if (typeof fn !== 'function') {
        throw new Error("Expected <function>");
      }
      ref = this.childrenMap;
      results = [];
      for (key in ref) {
        node = ref[key];
        results.push(fn(key, node));
      }
      return results;
    };

    ObjectNode.prototype.forEachAsync = function(fn) {
      if (typeof fn !== 'function') {
        throw new Error("Expected <function>");
      }
      return window.odse.iterate(Object.keys(this.childrenMap), (function(_this) {
        return function(next, index, key) {
          return fn(next, key, _this.getNode(key));
        };
      })(this));
    };

    ObjectNode.prototype.getKeyList = function() {
      return Object.keys(this.childrenMap);
    };

    ObjectNode.prototype.getNode = function(key) {
      if (!(key in this.childrenMap)) {
        throw new Error("Unknown Key");
      }
      return this.childrenMap[key];
    };

    ObjectNode.prototype.hasNode = function(key) {
      return key in this.childrenMap;
    };

    return ObjectNode;

  })(window.odse.ContainerNode);

  ArrayNode = (function(superClass) {
    extend(ArrayNode, superClass);

    function ArrayNode(array) {
      if (array == null) {
        array = [];
      }
      ArrayNode.__super__.constructor.apply(this, arguments);
      this.childrenList = [];
      this.__setValue(array);
    }

    ArrayNode.prototype.__setValue = function(newValue) {
      var index, j, len1, results, value;
      ArrayNode.__super__.__setValue.apply(this, arguments);
      if (!(typeof newValue === 'object' && Array.isArray(newValue))) {
        throw new Error("Expected <object>");
      }
      this.__resetList();
      if (!(newValue && newValue.length > 0)) {
        return;
      }
      results = [];
      for (index = j = 0, len1 = newValue.length; j < len1; index = ++j) {
        value = newValue[index];
        this.childrenList.push(window.odse.ObjectDataStorageEngine.parse(value));
        results.push(this.childrenList[this.childrenList.length - 1]._attachTo(this));
      }
      return results;
    };

    ArrayNode.prototype.__resetList = function() {
      var index, j, len1, node, ref;
      ref = this.childrenList;
      for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
        node = ref[index];
        node._detachFrom(this);
      }
      return this.childrenList = [];
    };

    ArrayNode.prototype.removeNode = function(index) {
      var detail, node;
      if (!((0 <= index && index < this.childrenList.length))) {
        throw new Error("index out of bound");
      }
      node = this.childrenList[index];
      detail = {
        node: this,
        childNode: node,
        operation: 'child-remove',
        index: index
      };
      node._detachFrom(this);
      this.childrenList.splice(index, 1);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('update', detail);
        };
      })(this));
    };

    ArrayNode.prototype.__pushNode = function(node, op, atTheEnd) {
      var detail;
      detail = {
        node: this,
        childNode: node,
        operation: op,
        index: null
      };
      detail.index = atTheEnd ? this.childrenList.push(node) : this.childrenList.unshift(node);
      node._attachTo(this);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('update', detail);
        };
      })(this));
    };

    ArrayNode.prototype.pushNode = function(node) {
      return this.__pushNode(node, 'child-push', true);
    };

    ArrayNode.prototype.unshiftNode = function(node) {
      return this.__pushNode(node, 'child-unshift', false);
    };

    ArrayNode.prototype.__popNode = function(op, atTheEnd) {
      var detail;
      if (this.childrenList.length === 0) {
        return false;
      }
      detail = {
        node: this,
        childNode: this.childrenList[this.childrenList.length - 1],
        operation: op,
        index: this.childrenList.length - 1
      };
      (atTheEnd ? this.childrenList.pop() : this.childrenList.shift())._detachFrom(this);
      return setImmediate((function(_this) {
        return function() {
          return _this.emit('update', detail);
        };
      })(this));
    };

    ArrayNode.prototype.popNode = function() {
      return this.__popNode('child-pop', true);
    };

    ArrayNode.prototype.shiftNode = function() {
      return this.__popNode('child-shift', false);
    };

    ArrayNode.prototype.remove = function() {
      var index, j, len1, node, ref;
      ref = this.childrenList;
      for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
        node = ref[index];
        node._detachFrom(this);
      }
      this.childrenList = {};
      return ArrayNode.__super__.remove.apply(this, arguments);
    };

    ArrayNode.prototype.forceRemoveChild = function(nodeToRemove) {
      var index, j, len1, node, ref, results;
      ref = this.childrenList;
      results = [];
      for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
        node = ref[index];
        if (node === nodeToRemove) {
          results.push(this.removeNode(index));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ArrayNode.prototype.forEach = function(fn) {
      var index, j, len1, node, ref, results;
      if (typeof fn !== 'function') {
        throw new Error("Expected <function>");
      }
      ref = this.childrenList;
      results = [];
      for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
        node = ref[index];
        results.push(fn(node, index));
      }
      return results;
    };

    ArrayNode.prototype.forEachAsync = function(fn) {
      if (typeof fn !== 'function') {
        throw new Error("Expected <function>");
      }
      return window.odse.iterate(this.childrenList, fn);
    };

    ArrayNode.prototype.getLength = function() {
      return this.childrenList.length;
    };

    ArrayNode.prototype.getNode = function(index) {
      if (!((0 <= index && index < this.childrenList.length))) {
        throw new Error("index out of bound");
      }
      return this.childrenList[index];
    };

    ArrayNode.prototype.indexOf = function(node) {
      return this.childrenList.indexOf(node);
    };

    ArrayNode.prototype.lastIndexOf = function(node) {
      return this.childrenList.lastIndexOf(node);
    };

    return ArrayNode;

  })(window.odse.ContainerNode);

  ObjectDataStorageEngine = (function() {
    function ObjectDataStorageEngine() {}

    ObjectDataStorageEngine.parse = function(json, doForEachFn) {
      var node, type;
      if (doForEachFn == null) {
        doForEachFn = null;
      }
      type = typeof json;
      if (type === 'object' && json !== null) {
        if (Array.isArray(json)) {
          node = new window.odse.ArrayNode(json);
        } else {
          node = new window.odse.ObjectNode(json);
        }
      } else {
        node = new window.odse.PrimitiveNode(json);
      }
      if (doForEachFn) {
        doForEachFn(node);
      }
      return node;
    };

    return ObjectDataStorageEngine;

  })();

  window.odse.OdseEvent = OdseEvent;

  window.odse.BubbleableOdseEvent = BubbleableOdseEvent;

  window.odse.ObjectDataStorageEngine = ObjectDataStorageEngine;

  window.odse.ArrayNode = ArrayNode;

  window.odse.ObjectNode = ObjectNode;

  window.odse.ContainerNode = ContainerNode;

  window.odse.PrimitiveNode = PrimitiveNode;

  window.odse.ValueNode = ValueNode;

  window.odse.OdseNode = OdseNode;

  window.odse.CustomError = CustomError;

  window.odse.VendorError = VendorError;

  window.odse.DeveloperError = DeveloperError;

  window.odse.ExtendedError = ExtendedError;

  TransactioNodeManager = (function() {
    TransactioNodeManager.prototype.transactionList = null;

    function TransactioNodeManager() {
      this.transactionList = [];
    }

    TransactioNodeManager.prototype.processAndAddTransactionToList = function(transactioNodeObj) {
      if (this.transactionList.length > 0) {
        if (this.transactionList[this.transactionList.length - 1].createdTimeStamp >= transactioNodeObj.createdTimeStamp) {
          transactioNodeObj.createdTimeStamp = this.transactionList[this.transactionList.length - 1].createdTimeStamp + 1;
        }
      }
      if ((window.odse.GenericUtilities.isNotNull(transactioNodeObj, 'val')) === false) {
        delete transactioNodeObj.val;
      }
      return this.transactionList.push(transactioNodeObj);
    };

    TransactioNodeManager.prototype.addNewArrayNodeTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.newArrayStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.addNewObjectNodeTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.newObjectStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.addNewPrimitiveNodeTransaction = function(userId, blobId, nodeId, val) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.newPrimitiveStringConstant, val, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.arrayNodePushTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.arrayPushStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.objectAddTransaction = function(userId, blobId, nodeId, propertyName) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.objectAddStringConstant, null, propertyName);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.arrayRemoveTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.arrayRemoveStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.objectRemoveTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.objectRemoveStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.primitiveRemoveTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.primitiveRemoveStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    TransactioNodeManager.prototype.primitiveUpdateTransaction = function(userId, blobId, nodeId) {
      var transactioNodeObj;
      transactioNodeObj = new window.odse.TransactioNode(userId, blobId, nodeId, window.odse.OdseConfigs.primitiveRemoveStringConstant, null, null);
      return this.processAndAddTransactionToList(transactioNodeObj);
    };

    return TransactioNodeManager;

  })();

  window.odse.TransactioNodeManager = TransactioNodeManager;

  ConstructOdseTree = (function() {
    var _buildTree, data, nodeIdPathObj, transactioNodeManagerObj, transactionList, tree;

    nodeIdPathObj = null;

    transactionList = null;

    data = null;

    tree = null;

    transactioNodeManagerObj = null;

    function ConstructOdseTree(blobId, cbfn) {
      this.getTree = bind(this.getTree, this);
      this.extractValue = bind(this.extractValue, this);
      if ((window.odse.GenericUtilities.isNotNull(blobId)) === false) {
        throw new Error('Blob ID is required for ODSE node tree generation.');
      }
      nodeIdPathObj = {};
      transactionList = [];
      window.odse.StorageDecider.getNodeIdPathList(blobId, (function(_this) {
        return function(blobIdParam, nodeIdPathList) {
          var item, j, key, len1, value;
          for (j = 0, len1 = nodeIdPathList.length; j < len1; j++) {
            item = nodeIdPathList[j];
            for (key in item) {
              value = item[key];
              nodeIdPathObj[key] = value;
            }
          }
          return window.odse.StorageDecider.getTransactionHistory(blobId, function(blobIdParam, transactionListParam) {
            transactionList = transactionListParam;
            return _buildTree(cbfn);
          });
        };
      })(this));
    }

    _buildTree = function(cbfn) {
      var idx, item, j, len1, referenceArray;
      referenceArray = [];
      data = {};
      tree = {};
      idx = -1;
      for (j = 0, len1 = transactionList.length; j < len1; j++) {
        item = transactionList[j];
        if (item.type === window.odse.OdseConfigs.newArrayStringConstant) {
          referenceArray.push([]);
          idx++;
        } else if (item.type === window.odse.OdseConfigs.newObjectStringConstant) {
          referenceArray.push({});
          idx++;
        } else if (item.type === window.odse.OdseConfigs.newPrimitiveStringConstant) {
          referenceArray.push(item.val);
          idx++;
        } else if (item.type === window.odse.OdseConfigs.objectAddStringConstant) {
          referenceArray[idx - 1][item.propertyName] = referenceArray[idx];
          referenceArray.pop();
          idx--;
        } else if (item.type === window.odse.OdseConfigs.arrayPushStringConstant) {
          referenceArray[idx - 1].push(referenceArray[idx]);
          referenceArray.pop();
          idx--;
        }
      }
      data = referenceArray[0];
      return cbfn(true);
    };

    ConstructOdseTree.prototype.extractValue = function() {
      return data;
    };

    ConstructOdseTree.prototype.getTree = function() {
      return tree;
    };

    return ConstructOdseTree;

  })();

  window.odse.ConstructOdseTree = ConstructOdseTree;

  ClientStorageHandler = (function() {
    var storageObj;

    storageObj = null;

    function ClientStorageHandler() {
      this.get = bind(this.get, this);
      this.set = bind(this.set, this);
      var error, ex;
      try {
        storageObj = localStorage;
      } catch (error) {
        ex = error;
        storageObj = null;
      }
    }

    ClientStorageHandler.prototype.initializeStorage = function(key) {
      var a;
      return a = 1;
    };

    ClientStorageHandler.prototype.set = function(key, value) {
      var item, j, len1, storedValue;
      if ((window.odse.GenericUtilities.isNotNull(this.get(key))) === false) {
        value = JSON.stringify(value);
        return storageObj.setItem(key, value);
      } else {
        storedValue = this.get(key);
        storedValue = JSON.parse(storedValue);
        if ((typeof storedValue).toLowerCase() === 'object' && Array.isArray(storedValue)) {
          for (j = 0, len1 = value.length; j < len1; j++) {
            item = value[j];
            storedValue.push(item);
          }
        } else if ((typeof storedValue).toLowerCase() === 'object') {
          for (key in value) {
            item = value[key];
            storedValue[key] = item;
          }
        } else {
          throw new Error('Invalid approach to store data on client side.');
        }
        value = JSON.stringify(storedValue);
        return storageObj.setItem(key, value);
      }
    };

    ClientStorageHandler.prototype.get = function(key) {
      var value;
      value = storageObj.getItem(key);
      value = JSON.parse(value);
      return value;
    };

    return ClientStorageHandler;

  })();

  window.odse.ClientStorageHandler = ClientStorageHandler;

  ClientPendingSyncHandler = (function() {
    var isClient, lsObj;

    isClient = null;

    lsObj = null;

    function ClientPendingSyncHandler() {
      isClient = !window.odse.GenericUtilities.isRunningOnServer();
      lsObj = new window.odse.ClientStorageHandler();
    }

    return ClientPendingSyncHandler;

  })();

  window.odse.ClientPendingSyncHandler = newClientPendingSyncHandler();

  InitialDataDissection = (function() {
    var _addNodePathViaNodeIdList, _recursiveDataBuild, allNodeIdPathList, blobId, transactioNodeManagerObj, userId;

    function InitialDataDissection() {
      this.run = bind(this.run, this);
    }

    blobId = null;

    userId = null;

    allNodeIdPathList = null;

    transactioNodeManagerObj = null;

    InitialDataDissection.prototype.run = function(jsonString, userIdParam, cbfn) {
      transactioNodeManagerObj = new window.odse.TransactioNodeManager();
      blobId = window.odse.GenericUtilities.generateDataBlobId();
      userId = userIdParam;
      allNodeIdPathList = [];
      _recursiveDataBuild([], JSON.parse(jsonString));
      window.odse.StorageDecider.saveBothTransactionHistoryAndNewNodeIdPathList(transactioNodeManagerObj.transactionList, {
        blobId: blobId,
        allNodeIdPathList: allNodeIdPathList
      }, cbfn);
      return blobId;
    };

    _addNodePathViaNodeIdList = function(nodePath) {
      var childNodeId, newPath;
      childNodeId = nodePath[nodePath.length - 1];
      newPath = {};
      newPath[childNodeId] = nodePath;
      return allNodeIdPathList.push(newPath);
    };

    _recursiveDataBuild = function(nodeIdPathList, data) {
      var currentNodeObj, id, item, j, k, key, len1, len2, newNodeIdPathList, value;
      newNodeIdPathList = [];
      for (j = 0, len1 = nodeIdPathList.length; j < len1; j++) {
        id = nodeIdPathList[j];
        newNodeIdPathList.push(id);
      }
      currentNodeObj = null;
      if (data === null || (typeof data).toLowerCase() === 'undefined') {
        currentNodeObj = new window.odse.PrimitiveNode();
        newNodeIdPathList.push(currentNodeObj.nodeId);
        _addNodePathViaNodeIdList(newNodeIdPathList);
        transactioNodeManagerObj.addNewPrimitiveNodeTransaction(userId, blobId, currentNodeObj.nodeId, null);
      } else if ((typeof data).toLowerCase() === 'object' && (Array.isArray(data))) {
        currentNodeObj = new window.odse.ArrayNode();
        newNodeIdPathList.push(currentNodeObj.nodeId);
        transactioNodeManagerObj.addNewArrayNodeTransaction(userId, blobId, currentNodeObj.nodeId);
        for (k = 0, len2 = data.length; k < len2; k++) {
          item = data[k];
          currentNodeObj.pushNode(_recursiveDataBuild(newNodeIdPathList, item));
          transactioNodeManagerObj.arrayNodePushTransaction(userId, blobId, currentNodeObj.nodeId);
        }
        _addNodePathViaNodeIdList(newNodeIdPathList);
      } else if ((typeof data).toLowerCase() === 'object') {
        currentNodeObj = new window.odse.ObjectNode();
        newNodeIdPathList.push(currentNodeObj.nodeId);
        transactioNodeManagerObj.addNewObjectNodeTransaction(userId, blobId, currentNodeObj.nodeId);
        for (key in data) {
          value = data[key];
          currentNodeObj.addNode(key, _recursiveDataBuild(newNodeIdPathList, value));
          transactioNodeManagerObj.objectAddTransaction(userId, blobId, currentNodeObj.nodeId, key);
        }
        _addNodePathViaNodeIdList(newNodeIdPathList);
      } else if ((typeof data).toLowerCase() === 'number' || (typeof data).toLowerCase() === 'string' || (typeof data).toLowerCase() === 'symbol' || (typeof data).toLowerCase() === 'boolean') {
        if (Object.prototype.toString.call(data) === '[object Date]') {
          data = data.getTime();
        }
        currentNodeObj = new window.odse.PrimitiveNode(data);
        newNodeIdPathList.push(currentNodeObj.nodeId);
        _addNodePathViaNodeIdList(newNodeIdPathList);
        transactioNodeManagerObj.addNewPrimitiveNodeTransaction(userId, blobId, currentNodeObj.nodeId, data);
      }
      return currentNodeObj;
    };

    return InitialDataDissection;

  })();

  window.odse.InitialDataDissectionObj = newInitialDataDissection();

  TreeMerger = (function() {
    function TreeMerger() {
      var jsonString;
      new ClientOdseScriptGenerator();
      jsonString = '[{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"button-up","classList":{"0":"button-up"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"body","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"header","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"lang-chooser","classList":{"0":"lang-chooser"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox menu-box","classList":{"0":"roundbox","1":"menu-box"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lb","classList":{"0":"roundbox-lb"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rb","classList":{"0":"roundbox-rb"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"menu-list-container","classList":{"0":"menu-list-container"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"sidebar","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox sidebox","classList":{"0":"roundbox","1":"sidebox"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"caption titled","classList":{"0":"caption","1":"titled"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"top-links","classList":{"0":"top-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"socials","classList":{"0":"socials"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"fb-root","className":" fb_reset","classList":{"0":"fb_reset"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"fb-like fb_iframe_widget","classList":{"0":"fb-like","1":"fb_iframe_widget"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox sidebox","classList":{"0":"roundbox","1":"sidebox"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"caption titled","classList":{"0":"caption","1":"titled"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"top-links","classList":{"0":"top-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"personal-sidebar","classList":{"0":"personal-sidebar"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"for-avatar","classList":{"0":"for-avatar"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"avatar","classList":{"0":"avatar"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox sidebox top-contributed","classList":{"0":"roundbox","1":"sidebox","2":"top-contributed"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"caption titled","classList":{"0":"caption","1":"titled"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"top-links","classList":{"0":"top-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"bottom-links","classList":{"0":"bottom-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox sidebox top-contributed","classList":{"0":"roundbox","1":"sidebox","2":"top-contributed"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"caption titled","classList":{"0":"caption","1":"titled"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"top-links","classList":{"0":"top-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"bottom-links","classList":{"0":"bottom-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox sidebox","classList":{"0":"roundbox","1":"sidebox"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"caption titled","classList":{"0":"caption","1":"titled"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"top-links","classList":{"0":"top-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox sidebox","classList":{"0":"roundbox","1":"sidebox"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-lt","classList":{"0":"roundbox-lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"roundbox-rt","classList":{"0":"roundbox-rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"caption titled","classList":{"0":"caption","1":"titled"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"top-links","classList":{"0":"top-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"recent-actions","classList":{"0":"recent-actions"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"bottom-links","classList":{"0":"bottom-links"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"pageContent","className":"content-with-sidebar","classList":{"0":"content-with-sidebar"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"second-level-menu","classList":{"0":"second-level-menu"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"leftLava","classList":{"0":"leftLava"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"bottomLava","classList":{"0":"bottomLava"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"cornerLava","classList":{"0":"cornerLava"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"datatable ratingsDatatable","classList":{"0":"datatable","1":"ratingsDatatable"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"lt","classList":{"0":"lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"rt","classList":{"0":"rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"lb","classList":{"0":"lb"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"rb","classList":{"0":"rb"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"ilt","classList":{"0":"ilt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"irt","classList":{"0":"irt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"pagination","classList":{"0":"pagination"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"footer","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"userListsFacebox","classList":{"0":"userListsFacebox"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"datatable","classList":{"0":"datatable"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"lt","classList":{"0":"lt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"rt","classList":{"0":"rt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"lb","classList":{"0":"lb"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"rb","classList":{"0":"rb"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"ilt","classList":{"0":"ilt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"irt","classList":{"0":"irt"},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"datepick-div","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxOverlay","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"colorbox","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxWrapper","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxTopLeft","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxTopCenter","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxTopRight","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxMiddleLeft","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxContent","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxLoadedContent","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxLoadingOverlay","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxLoadingGraphic","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxTitle","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxCurrent","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxNext","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxPrevious","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxSlideshow","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxClose","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxMiddleRight","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxBottomLeft","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxBottomCenter","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"cboxBottomRight","className":"","classList":{},"nodeType":1},{"tabIndex":-1,"localName":"div","tagName":"DIV","id":"","className":"","classList":{},"nodeType":1}]';
      jsonString = '[{"val":1,"name":"test"},{"val":2,"name":"ron"}]';
      jsonString = '{"val":1}';
      window.odse.ServerOdseApiCall.clearAllOdseDataApi((function(_this) {
        return function(response1) {
          var blobId1;
          console.log(response1);
          return blobId1 = window.odse.InitialDataDissectionObj.run(jsonString, 'ARSDP3vSx01QNiPGARSDP3vSx01QNiPGARSDP3vSx01QNiPGARSDP3vSx01QNiPGARSDP3vSx01QNiPGARSDP3vSx01QNiPGARSDP3vSx01QNiPGARSDP3vSx01QNiPG', function(response2, response3) {
            var constructOdseTreeObj;
            console.log(response2);
            console.log(response3);
            return constructOdseTreeObj = new window.odse.ConstructOdseTree(blobId1, function() {
              return console.log(constructOdseTreeObj.extractValue());
            });
          });
        };
      })(this));
    }

    return TreeMerger;

  })();

  new TreeMerger();

}).call(this);
